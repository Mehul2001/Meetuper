{"remainingRequest":"/Users/mehul/Meetuper/node_modules/babel-loader/lib/index.js!/Users/mehul/Meetuper/node_modules/eslint-loader/index.js??ref--13-0!/Users/mehul/Meetuper/src/store/modules/threads.js","dependencies":[{"path":"/Users/mehul/Meetuper/src/store/modules/threads.js","mtime":1555814965183},{"path":"/Users/mehul/Meetuper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mehul/Meetuper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mehul/Meetuper/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport Vue from 'vue';\nimport axios from 'axios';\nimport axiosInstance from '@/services/axios';\nexport default {\n  namespaced: true,\n  state: {\n    items: []\n  },\n  actions: {\n    fetchThreads: function fetchThreads(_ref, meetupId) {\n      var state = _ref.state,\n          commit = _ref.commit;\n      return axios.get(\"/api/v1/threads?meetupId=\".concat(meetupId)).then(function (res) {\n        var threads = res.data;\n        commit('setItems', {\n          resource: 'threads',\n          items: threads\n        }, {\n          root: true\n        });\n        return state.items;\n      });\n    },\n    postThread: function postThread(_ref2, _ref3) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      var title = _ref3.title,\n          meetupId = _ref3.meetupId;\n      var thread = {};\n      thread.title = title;\n      thread.meetup = meetupId;\n      return axiosInstance.post('/api/v1/threads', thread).then(function (res) {\n        var createdThread = res.data;\n        var index = state.items.length;\n        commit('addItemToArray', {\n          item: createdThread,\n          index: index,\n          resource: 'threads'\n        }, {\n          root: true\n        });\n        return createdThread;\n      });\n    },\n    sendPost: function sendPost(_ref4, _ref5) {\n      var dispatch = _ref4.dispatch;\n      var text = _ref5.text,\n          threadId = _ref5.threadId;\n      var post = {\n        text: text,\n        thread: threadId\n      };\n      return axiosInstance.post('/api/v1/posts', post).then(function (res) {\n        var createdPost = res.data;\n        dispatch('addPostToThread', {\n          post: createdPost,\n          threadId: threadId\n        });\n        return createdPost;\n      });\n    },\n    addPostToThread: function addPostToThread(_ref6, _ref7) {\n      var commit = _ref6.commit,\n          state = _ref6.state;\n      var post = _ref7.post,\n          threadId = _ref7.threadId;\n      var threadIndex = state.items.findIndex(function (thread) {\n        return thread._id === threadId;\n      });\n\n      if (threadIndex > -1) {\n        var posts = state.items[threadIndex].posts;\n        posts.unshift(post);\n        commit('savePostToThread', {\n          posts: posts,\n          index: threadIndex\n        });\n      }\n    }\n  },\n  mutations: {\n    savePostToThread: function savePostToThread(state, _ref8) {\n      var posts = _ref8.posts,\n          index = _ref8.index;\n      Vue.set(state.items[index], 'posts', posts);\n    }\n  }\n};",{"version":3,"sources":["/Users/mehul/Meetuper/src/store/modules/threads.js"],"names":["Vue","axios","axiosInstance","namespaced","state","items","actions","fetchThreads","meetupId","commit","get","then","res","threads","data","resource","root","postThread","title","thread","meetup","post","createdThread","index","length","item","sendPost","dispatch","text","threadId","createdPost","addPostToThread","threadIndex","findIndex","_id","posts","unshift","mutations","savePostToThread","set"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport axios from 'axios'\nimport axiosInstance from '@/services/axios'\nexport default {\n    namespaced: true,\n\n    state: {\n        items: []\n    },\n    actions: {\n        fetchThreads({ state, commit }, meetupId) {\n            return axios.get(`/api/v1/threads?meetupId=${meetupId}`)\n                .then(res => {\n                    const threads = res.data\n                    commit('setItems', { resource: 'threads', items: threads }, { root: true })\n                    return state.items\n                })\n        },\n        postThread({ commit, state }, { title, meetupId }) {\n            const thread = {}\n            thread.title = title\n            thread.meetup = meetupId\n\n            return axiosInstance.post('/api/v1/threads', thread)\n                .then(res => {\n                    const createdThread = res.data\n                    const index = state.items.length\n\n                    commit('addItemToArray', { item: createdThread, index, resource: 'threads' }, { root: true })\n                    return createdThread\n                })\n        },\n        sendPost({ dispatch }, { text, threadId }) {\n            const post = { text, thread: threadId }\n            return axiosInstance.post('/api/v1/posts', post)\n                .then(res => {\n                    const createdPost = res.data\n                    dispatch('addPostToThread', { post: createdPost, threadId })\n                    return createdPost\n                })\n        },\n        addPostToThread({ commit, state }, { post, threadId }) {\n            const threadIndex = state.items.findIndex(thread => thread._id === threadId)\n            if (threadIndex > -1) {\n                const posts = state.items[threadIndex].posts\n                posts.unshift(post)\n                commit('savePostToThread', { posts, index: threadIndex })\n            }\n        }\n    },\n    mutations: {\n        savePostToThread(state, { posts, index }) {\n            Vue.set(state.items[index], 'posts', posts)\n        }\n    }\n}"]}]}