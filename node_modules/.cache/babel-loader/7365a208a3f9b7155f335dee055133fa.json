{"remainingRequest":"/Users/mehul/Meetuper/node_modules/thread-loader/dist/cjs.js!/Users/mehul/Meetuper/node_modules/babel-loader/lib/index.js!/Users/mehul/Meetuper/node_modules/eslint-loader/index.js??ref--13-0!/Users/mehul/Meetuper/src/store/modules/threads.js","dependencies":[{"path":"/Users/mehul/Meetuper/src/store/modules/threads.js","mtime":1555911714195},{"path":"/Users/mehul/Meetuper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mehul/Meetuper/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mehul/Meetuper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mehul/Meetuper/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/mehul/Meetuper/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport Vue from 'vue';\nimport axios from 'axios';\nimport axiosInstance from '@/services/axios';\nimport { applyFilters } from '@/helpers';\nexport default {\n  namespaced: true,\n  state: {\n    isAllThreadsLoaded: false,\n    items: []\n  },\n  actions: {\n    fetchThreads: function fetchThreads(_ref, _ref2) {\n      var state = _ref.state,\n          commit = _ref.commit;\n      var meetupId = _ref2.meetupId,\n          _ref2$filter = _ref2.filter,\n          filter = _ref2$filter === void 0 ? {} : _ref2$filter,\n          init = _ref2.init;\n\n      if (init) {\n        commit('setItems', {\n          resource: 'threads',\n          items: []\n        }, {\n          root: true\n        });\n      }\n\n      var url = applyFilters(\"/api/v1/threads?meetupId=\".concat(meetupId), filter);\n      return axios.get(url).then(function (res) {\n        var _res$data = res.data,\n            threads = _res$data.threads,\n            isAllDataLoaded = _res$data.isAllDataLoaded;\n        commit('setAllDataLoaded', isAllDataLoaded);\n        commit('mergeThreads', threads);\n        return state.items;\n      });\n    },\n    postThread: function postThread(_ref3, _ref4) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      var title = _ref4.title,\n          meetupId = _ref4.meetupId;\n      var thread = {};\n      thread.title = title;\n      thread.meetup = meetupId;\n      return axiosInstance.post('/api/v1/threads', thread).then(function (res) {\n        var createdThread = res.data;\n        var index = state.items.length;\n        commit('addItemToArray', {\n          item: createdThread,\n          index: index,\n          resource: 'threads'\n        }, {\n          root: true\n        });\n        return createdThread;\n      });\n    },\n    sendPost: function sendPost(_ref5, _ref6) {\n      var dispatch = _ref5.dispatch;\n      var text = _ref6.text,\n          threadId = _ref6.threadId;\n      var post = {\n        text: text,\n        thread: threadId\n      };\n      return axiosInstance.post('/api/v1/posts', post).then(function (res) {\n        var createdPost = res.data;\n        dispatch('addPostToThread', {\n          post: createdPost,\n          threadId: threadId\n        });\n        return createdPost;\n      });\n    },\n    addPostToThread: function addPostToThread(_ref7, _ref8) {\n      var commit = _ref7.commit,\n          state = _ref7.state;\n      var post = _ref8.post,\n          threadId = _ref8.threadId;\n      var threadIndex = state.items.findIndex(function (thread) {\n        return thread._id === threadId;\n      });\n\n      if (threadIndex > -1) {\n        var posts = state.items[threadIndex].posts;\n        posts.unshift(post);\n        commit('savePostToThread', {\n          posts: posts,\n          index: threadIndex\n        });\n      }\n    }\n  },\n  mutations: {\n    savePostToThread: function savePostToThread(state, _ref9) {\n      var posts = _ref9.posts,\n          index = _ref9.index;\n      Vue.set(state.items[index], 'posts', posts);\n    },\n    setAllDataLoaded: function setAllDataLoaded(state, isAllDataLoaded) {\n      state.isAllThreadsLoaded = isAllDataLoaded;\n    },\n    mergeThreads: function mergeThreads(state, threads) {\n      state.items = [].concat(_toConsumableArray(state.items), _toConsumableArray(threads));\n    }\n  }\n};",{"version":3,"sources":["/Users/mehul/Meetuper/src/store/modules/threads.js"],"names":["Vue","axios","axiosInstance","applyFilters","namespaced","state","isAllThreadsLoaded","items","actions","fetchThreads","commit","meetupId","filter","init","resource","root","url","get","then","res","data","threads","isAllDataLoaded","postThread","title","thread","meetup","post","createdThread","index","length","item","sendPost","dispatch","text","threadId","createdPost","addPostToThread","threadIndex","findIndex","_id","posts","unshift","mutations","savePostToThread","set","setAllDataLoaded","mergeThreads"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport axios from 'axios'\nimport axiosInstance from '@/services/axios'\nimport { applyFilters } from '@/helpers'\nexport default {\n    namespaced: true,\n\n    state: {\n        isAllThreadsLoaded: false,\n        items: []\n    },\n    actions: {\n        fetchThreads({ state, commit }, { meetupId, filter = {}, init }) {\n            if (init) {\n                commit('setItems', { resource: 'threads', items: [] }, { root: true })\n            }\n            const url = applyFilters(`/api/v1/threads?meetupId=${meetupId}`, filter)\n            return axios.get(url)\n                .then(res => {\n                    const { threads, isAllDataLoaded } = res.data\n                    commit('setAllDataLoaded', isAllDataLoaded)\n                    commit('mergeThreads', threads)\n                    return state.items\n                })\n        },\n        postThread({ commit, state }, { title, meetupId }) {\n            const thread = {}\n            thread.title = title\n            thread.meetup = meetupId\n\n            return axiosInstance.post('/api/v1/threads', thread)\n                .then(res => {\n                    const createdThread = res.data\n                    const index = state.items.length\n\n                    commit('addItemToArray', { item: createdThread, index, resource: 'threads' }, { root: true })\n                    return createdThread\n                })\n        },\n        sendPost({ dispatch }, { text, threadId }) {\n            const post = { text, thread: threadId }\n            return axiosInstance.post('/api/v1/posts', post)\n                .then(res => {\n                    const createdPost = res.data\n                    dispatch('addPostToThread', { post: createdPost, threadId })\n                    return createdPost\n                })\n        },\n        addPostToThread({ commit, state }, { post, threadId }) {\n            const threadIndex = state.items.findIndex(thread => thread._id === threadId)\n            if (threadIndex > -1) {\n                const posts = state.items[threadIndex].posts\n                posts.unshift(post)\n                commit('savePostToThread', { posts, index: threadIndex })\n            }\n        }\n    },\n    mutations: {\n        savePostToThread(state, { posts, index }) {\n            Vue.set(state.items[index], 'posts', posts)\n        },\n        setAllDataLoaded(state, isAllDataLoaded) {\n            state.isAllThreadsLoaded = isAllDataLoaded\n        },\n        mergeThreads(state, threads) {\n            state.items = [...state.items, ...threads]\n        }\n    }\n}"]}]}